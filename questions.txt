Питання:


наприкла підключаемо errorsHandler, той що за помилки буде відповідати, просто це зрробити в кожному
модулі, де е catch , але можливо краще підключити у корі , а в решті модулів АБО з кору брати, або
може ще якось можливо? Щоб в кожному не реквайрити - бо це ж дублювання коду наче, того що реквайр
замість себе допише, чи Нода зарптимізує і не буде строрювати зайвого.. але це не те, що
закеширує, а саме відстежить створенний модуль і не стане створювати ще один..

чи треба прописувати валідатор на пустий баді, тобто якщо в нашому запиті баді не очікуємо?

питання про консистенцію даних: якщо ми видаляємо користувача, але він записаний в якийся кімнаті,
то нам варто вручну (не буквальне) видаляти його з будь-яких таких місць, або є механізм?

як перевірити на рівні валідатор монго, що айді існує в коллекції


План творчості:
+ написати сервер CRUD по сутності notes
+ обробка помилок та статусів
+ декомпозиція (що таке core)
+- створення сервісу
+ підключення до БД - create new branch!
+ merge dev to main
+ додати в базу таймстамп
+ create global app errorHandler? remove try/catch from controller
+ конвертувати в сервісі // TODO convert to Types.ObjectId
 +- .env (remove config)
    розібратися як працює use бо його послідовність підключення не  повінсстю зрозуміла
    розібратися з імпортом в тому самому сенсі щодо послідовності, на яку вказує лінтер
    pagination, sort, skip, limit;



TODO for NODE projects
+ESLint встановити локально дев
    вносити правила до eslintrc.json: //TODO Shemsedinov has a lint file in HowProgramming works
    довжину рядка, кома с крапкою, анрезолвед
    + no console.log
    + spaces into { curly braces }


зафіксувати версії в package.json


















старі

розподілення відповідальностей між сервісом та контроллером,

можливо варто повертати з сервіса моделі об'єкт, що буде містити повідомлення, помилки, або отриманий
з моделі ресурс, бо інакше мій сервіс повертає дані різних типів.

як зробити щоб дія з одного модуля чекала на виконання дії з другого?

валідатори: зараза викидають 500: наприклад якщо в update в масиві не дату передавати

patch можливо краще не передавати в посиланні id елементу, що хотімо пропатчити, а хай бере з тіла запиту
id об'єкта

lean - ?

як валідувати кімнату у користувача (ref), якщо вона обов'язкова, як коли не обов'язкова

як валідувати patch, питання пов'язане з тим, що можуть бути не всі поля

чи потрібен ретурн в контроллері?
 return res.status(201).json({"messages": Controller.responseMessages.success[201]});
таким чином повертає об'єкт респонсу. ЧИ може він бути потрібен, це друге зитання.)

чи потрібні async методи в сервісі, вертаються проміси, навіть якщо явно це не вказувати
- тільки якщо декілька запитів з awaitom тоді треа писати async

як називати документ на рівні контроллера (Item в мене), на рівні сервісу (в мене Document)


Привіт, є питання щодо архітектури та відповідальностей компонентів конроллерів та сервісів, а саме:
встановлюємо юзеру руму за роутом POST users/join-to-room , для цього я створив метод в
 контроллері юзера, та після встановлення кімнати треба ще й документам (сутностям) і цієї
 кімнати, і той де юзер був до зміни (якщо десь був) пропатчити поля-массиви usersId
 - за це відповідає румСервіс. В моїй архітектурі можу все це зробити в контроллері юзера
 - працюючи з декількома сервісами , але чи це нормально? Вважаю це за бізнес-логіку, а її
 наче краще в сервісах обробляти, але тоді один сервіс буде знати (використовувати) про інший..
 Підкажіть хто як робить, ну або як краще.)


 блін, а може сервіс має бути БДСервіс, а не для кожної сутністі свій..

    чи варто передавати не в парамс а в боді айді юзера до якого ми хочемо прив'язати руму
не так
127.0.0.1:3000/api/v1/users/60e329f36dc92b1ab3f7cc7f/join-to-room
{
    "roomId": "60e35e4feed9f14ad325e81f"
}
а ось так
127.0.0.1:3000/api/v1/users/join-to-room
{
    "userId": "60e329f36dc92b1ab3f7cc7f",
    "roomId": "60e35e4feed9f14ad325e81f"
}

як зробити транзакцію, коли кімнату змінюємо, щоб дані лишалися консистентними?



